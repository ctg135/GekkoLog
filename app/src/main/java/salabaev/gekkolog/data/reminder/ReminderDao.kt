package salabaev.gekkolog.data.reminder

import androidx.lifecycle.LiveData
import androidx.room.Dao
import androidx.room.Insert
import androidx.room.Query
import androidx.room.Update
import io.reactivex.internal.operators.single.SingleTakeUntil

@Dao
interface ReminderDao {
    @Query("SELECT * FROM reminders WHERE id = :id")
    fun getReminder(id: Int): LiveData<Reminder>

    @Insert
    fun addReminder(reminder: Reminder)

    @Update
    fun updateReminder(reminder: Reminder)

    @Query("DELETE FROM reminders WHERE id = :id")
    fun deleteReminder(id: Int)

    @Query("DELETE FROM reminders WHERE geckoId = :geckoId AND type = :type AND autoGenerated = 1")
    fun deleteAutoRemainders(geckoId: Int, type: String)

    @Query("DELETE FROM reminders " +
            "WHERE geckoId = :geckoId " +
            "AND type = :type " +
            "AND date BETWEEN :since AND :until")
    fun deleteBetweenDates(geckoId: Int, since: Long, until: Long, type: String)

    @Query("SELECT * FROM reminders WHERE date BETWEEN :since AND :until")
    fun getReminders(since: Long, until: Long): LiveData<List<Reminder>>
}