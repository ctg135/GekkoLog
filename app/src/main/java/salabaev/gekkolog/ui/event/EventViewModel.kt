package salabaev.gekkolog.ui.event

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import salabaev.gekkolog.data.event.Event
import salabaev.gekkolog.data.event.EventRepository
import salabaev.gekkolog.data.gecko.GeckoRepository
import salabaev.gekkolog.data.reminder.Reminder
import salabaev.gekkolog.data.reminder.ReminderRepository
import java.util.Calendar

class EventViewModel (private val repository: EventRepository,
                      val geckoRepository: GeckoRepository,
                      private val remainderRepository: ReminderRepository
) : ViewModel() {
    private val _event = MutableLiveData<Event?>()
    val event: LiveData<Event?> = _event

    fun loadEvent(eventId: Int) {
        viewModelScope.launch {
            repository.getEvent(eventId).observeForever { event ->
                _event.postValue(event)
            }
        }
    }

    fun saveEvent(event: Event) {
        viewModelScope.launch {
            if (event.id == 0) {
                launch(Dispatchers.IO) {
                    repository.addEvent(event)

                    if (event.type == "FEED") {
                        val calendar = Calendar.getInstance().apply {
                            set(Calendar.HOUR_OF_DAY, 0)
                            set(Calendar.MINUTE, 0)
                            set(Calendar.SECOND, 0)
                            set(Calendar.MILLISECOND, 0)
                        }
                        val since = calendar.timeInMillis
                        calendar.add(Calendar.DAY_OF_MONTH, 1)
                        val until = calendar.timeInMillis

                        remainderRepository.deleteBetweenDates(
                            event.geckoId!!,
                            since,
                            until,
                            "FEED"
                        )
                        remainderRepository.deleteAutoRemainders(event.geckoId!!, "FEED")

                        // Получаем данные синхронно
                        val gecko = geckoRepository.getGeckoSync(event.geckoId!!)
                        val lastFeeds = repository.get3LastFeedsSync(event.geckoId!!)

                        // Создание автоматического уведомления
                        val autoReminder = Reminder().apply {
                            autoGenerated = true
                            geckoId = event.geckoId
                            type = "FEED"

                            // Устанавливаем дату следующего кормления
                            gecko.feedPeriod?.let {
                                val nextFeedDate = Calendar.getInstance()
                                nextFeedDate.set(Calendar.DAY_OF_MONTH, it)
                                date = nextFeedDate.timeInMillis
                            }

                            // Устанавливаем описание
                            var check = false
                            if (lastFeeds.count() == 3) {
                                check = lastFeeds[0].feedType == "CA" &&
                                        lastFeeds[1].feedType == "CA" &&
                                        lastFeeds[2].feedType == "CA"
                            }

                            description = if (check) {
                                "Кормление питомца (Витамины)"
                            } else {
                                "Кормление питомца (Кальций)"
                            }
                        }

                        autoReminder.date?.let {
                            remainderRepository.addReminder(autoReminder)
                        }
                    }
                }
            } else {
                repository.updateEvent(event)
            }
        }
    }

    fun deleteEvent(eventId: Int) {
        viewModelScope.launch {
            if (eventId != 0) {
                repository.deleteEvent(eventId)
            }
        }
    }

    fun deleteReminder(reminderId: Int) {
        viewModelScope.launch {
            if (reminderId != 0) {
                remainderRepository.deleteReminder(reminderId)
            }
        }
    }

}