package salabaev.gekkolog.ui.event

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.launch
import salabaev.gekkolog.data.event.Event
import salabaev.gekkolog.data.event.EventRepository
import salabaev.gekkolog.data.gecko.Gecko
import salabaev.gekkolog.data.gecko.GeckoRepository
import salabaev.gekkolog.data.reminder.Reminder
import salabaev.gekkolog.data.reminder.ReminderRepository
import java.util.Calendar

class EventViewModel (private val repository: EventRepository,
                      val geckoRepository: GeckoRepository,
                      private val remainderRepository: ReminderRepository
) : ViewModel() {
    private val _event = MutableLiveData<Event?>()
    val event: LiveData<Event?> = _event

    fun loadEvent(eventId: Int) {
        viewModelScope.launch {
            repository.getEvent(eventId).observeForever { event ->
                _event.postValue(event)
            }
        }
    }

    fun saveEvent(event: Event) {
        viewModelScope.launch {
            if (event.id == 0) {
                repository.addEvent(event)
                // Если было создано событие кормления
                // то удаляются напоминания кормления на этот день
                // а также автоматически сгенерированные для этого питомца
                // Далее создается новое уведомление по периоду кормления
                // если период есть
                if (event.type == "FEED") {
                    val calendar = Calendar.getInstance()
                    calendar.set(Calendar.HOUR_OF_DAY, 0)
                    calendar.set(Calendar.MINUTE, 0)
                    calendar.set(Calendar.SECOND, 0)
                    calendar.set(Calendar.MILLISECOND, 0)
                    val since = calendar.timeInMillis

                    calendar.add(Calendar.DAY_OF_MONTH, 1)
                    val until = calendar.timeInMillis

                    // Очистка во временном промежутке
                    remainderRepository.deleteBetweenDates(
                        event.geckoId!!,
                        since,
                        until,
                        "FEED"
                    )
                    // Очистка автоматических уведомлений
                    remainderRepository.deleteAutoRemainders(event.geckoId!!, "FEED")

                    // Создание автоматического уведомления
                    val autoRemainder: Reminder = Reminder().apply {
                        autoGenerated = true
                        geckoId = event.geckoId
                        type = "FEED"
                        geckoRepository.getGecko(event.geckoId!!).observeForever { gecko: Gecko ->
                            gecko.feedPeriod?.let {
                                val nextFeedDate = Calendar.getInstance()
                                nextFeedDate.set(Calendar.DAY_OF_MONTH, it)
                                date = nextFeedDate.timeInMillis
                            }
                        }

                        repository.get4LastFeeds(event.geckoId!!).observeForever { events ->
                            if (events.count() != 4) return@observeForever
                            else {
                                var check: Boolean
                                events[0].feedType.let { feedType ->
                                    check = feedType == "VIT"
                                }
                                events[1].feedType.let { feedType ->
                                    check = ( feedType == "CA" && check )
                                }
                                events[2].feedType.let { feedType ->
                                    check = ( feedType == "CA" && check )
                                }
                                events[3].feedType.let { feedType ->
                                    check = ( feedType == "CA" && check )
                                }
                                description = when(check){
                                    true -> {
                                        "Кормление питомца (Витамины)"
                                    }
                                    false -> {
                                        "Кормление питомца (Кальций)"
                                    }
                                }
                            }
                        }
                    }

                    autoRemainder.date?.let {
                        remainderRepository.addReminder(autoRemainder)
                    }
                }
            } else {
                repository.updateEvent(event)
            }
        }
    }

    fun deleteEvent(eventId: Int) {
        viewModelScope.launch {
            if (eventId != 0) {
                repository.deleteEvent(eventId)
            }
        }
    }


}