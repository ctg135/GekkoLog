package salabaev.gekkolog.ui.pets.edit

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModel
import salabaev.gekkolog.data.gecko.Gecko
import salabaev.gekkolog.data.gecko.GeckoRepository
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine
import kotlinx.coroutines.withTimeoutOrNull
import salabaev.gekkolog.data.event.EventRepository
import salabaev.gekkolog.data.reminder.Reminder
import salabaev.gekkolog.data.reminder.ReminderRepository
import salabaev.gekkolog.ui.utils.NiceDateFormatter
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Locale

class PetEditViewModel (private val repository: GeckoRepository,
private val eventRepository: EventRepository,
private val reminderRepository: ReminderRepository): ViewModel() {
    private val _gecko = MutableLiveData<Gecko?>()
    val gecko: LiveData<Gecko?> = _gecko

    private val _lastWeight = MutableLiveData<String?>()
    val lastWeight: LiveData<String?> = _lastWeight
    private val _lastFeed = MutableLiveData<String?>()
    val lastFeed: LiveData<String?> = _lastFeed
    private val _lastShed = MutableLiveData<String?>()
    val lastShed: LiveData<String?> = _lastShed

    fun loadGecko(geckoId: Int) {
        viewModelScope.launch {
            viewModelScope.launch {
                repository.getGecko(geckoId).observeForever { gecko ->
                    _gecko.postValue(gecko)
                }
            }
        }
    }

    fun saveGecko(gecko: Gecko) {
        viewModelScope.launch {
            if (gecko.id == 0) {
                val newId = repository.addGecko(gecko)
                gecko.id = newId
                addReminderFeed(gecko)
            } else {
                repository.updateGecko(gecko)
                reremindFeed(gecko)
            }
        }
    }

    fun deleteGecko(geckoId: Int) {
        viewModelScope.launch {
            if (geckoId != 0) {
                repository.deleteGecko(geckoId)
            }
        }
    }

    fun getLastFeed(geckoId: Int){
        if (geckoId == 0) return
        viewModelScope.launch(Dispatchers.IO) {
            eventRepository.getLastFeed(geckoId)?.let { event ->
                var result: String
                var date = Calendar.getInstance()
                date.timeInMillis = event.date!!
                result = SimpleDateFormat("dd.MM.yyyy", Locale.getDefault()).format(date.time)
                when(event.feedType) {
                    "CA" -> { result += " (Кальций)" }
                    "VIT" -> { result += " (Витамины)" }
                }
                _lastFeed.postValue(result)
            }
        }
    }

    fun getLastWeight(geckoId: Int) {
        if (geckoId == 0) return
        viewModelScope.launch(Dispatchers.IO) {
            eventRepository.getLastWeight(geckoId)?.let { event ->
                var result: String = event.weight.toString() + " г."
                _lastWeight.postValue(result)
            }
        }
    }

    fun getLastShed(geckoId: Int){
        if (geckoId == 0) return
        viewModelScope.launch(Dispatchers.IO) {
            eventRepository.getLastShed(geckoId)?.let { event ->
                var result: String
                var date = Calendar.getInstance()
                date.timeInMillis = event.date!!
                result = NiceDateFormatter.getNiceAge(date.timeInMillis)
                event.shedSuccess?.let {
                    if(!it) { result += " Не справился сам" }
                }
                _lastShed.postValue(result)
            }
        }
    }

    // Создание уведомления о кормлении
    fun addReminderFeed(gecko: Gecko) {

        val autoReminder = Reminder().apply {
            autoGenerated = true
            geckoId = gecko.id
            type = "FEED"

            // Устанавливаем дату следующего кормления
            gecko.feedPeriod?.let {
                val nextFeedDate = Calendar.getInstance()
                nextFeedDate.add(Calendar.DAY_OF_MONTH, it)
                date = nextFeedDate.timeInMillis
            }

            description = "Кормление питомца (Кальций)"
        }

        autoReminder.date?.let {
            reminderRepository.addReminder(autoReminder)
        }
    }

    // Пересоздание уведомления о кормлении
    fun reremindFeed(gecko: Gecko) {
        viewModelScope.launch(Dispatchers.IO) {
            reminderRepository.deleteAutoRemainders(gecko.id, "FEED")
            // Получаем данные синхронно
            val lastFeeds = eventRepository.get3LastFeedsSync(gecko.id)
            // Создание автоматического уведомления
            val autoReminder = Reminder().apply {
                autoGenerated = true
                geckoId = gecko.id
                type = "FEED"

                // Устанавливаем дату следующего кормления
                gecko.feedPeriod?.let {
                    var nextFeedDate = Calendar.getInstance()
                    if (lastFeeds.isNotEmpty()) {
                        lastFeeds[0].date?.let { date ->
                            nextFeedDate.timeInMillis = date
                        }
                    }
                    nextFeedDate.add(Calendar.DAY_OF_MONTH, it)
                    date = nextFeedDate.timeInMillis
                }

                // Устанавливаем описание
                var check = false
                if (lastFeeds.count() == 3) {
                    check = lastFeeds[0].feedType == "CA" &&
                            lastFeeds[1].feedType == "CA" &&
                            lastFeeds[2].feedType == "CA"
                }

                description = if (check) {
                    "Кормление питомца (Витамины)"
                } else {
                    "Кормление питомца (Кальций)"
                }
            }

            autoReminder.date?.let {
                reminderRepository.addReminder(autoReminder)
            }
        }
    }
}